(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{422:function(t,e,a){"use strict";a.r(e);var r=a(25),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_4-reactmvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-reactmvvm"}},[t._v("#")]),t._v(" 4.reactMVVM")]),t._v(" "),a("h2",{attrs:{id:"技术栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术栈"}},[t._v("#")]),t._v(" 技术栈")]),t._v(" "),a("blockquote",[a("p",[t._v("  React + Redux + Router + webpack是最经典的React的技术栈。")])]),t._v(" "),a("h2",{attrs:{id:"flux架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flux架构"}},[t._v("#")]),t._v(" Flux架构")]),t._v(" "),a("blockquote",[a("p",[t._v("  React本身不具备完整的MVC或者MVVM功能，需要Flux架构的其他库，比如redux、mobx。Flux是数据的单向流动的一个框架结构，是一种思想或者设计模式，而不是一个框架。")])]),t._v(" "),a("img",{attrs:{src:"http://wx2.sinaimg.cn/mw690/e992a6b1gy1fv10xhw0spj21eo0lun18.jpg",width:"600"}}),t._v(" "),a("blockquote",[a("p",[t._v("  用户的事件→执行了ButtonContainer的CreateNewItem事件→执行了Action的addNewItem事件→带着actionType参数命令Dispatcher去dispatch → Store执行addNewItemHandler →触发store的emiteChange事件→ store自己监听到了这个事件，执行了Container里面的_change函数→改变自己的state → store的getAll函数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("  React最适合的就是Flux架构，因为它自己组件特有的State特性。要么就是用React写一些页面，要么就是用Flux架构搭建大的组件化项目。")])]),t._v(" "),a("h2",{attrs:{id:"redux框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux框架"}},[t._v("#")]),t._v(" Redux框架")]),t._v(" "),a("blockquote",[a("p",[t._v("  redux是基于Flux架构创建出的框架，数据单向流通。\n  Redux is a predictable state container for JavaScript apps译：Redux 是为Javascript应用而生的可预估的状态容器。定义有些抽象，简单来讲redux可以理解为基于flux和其他一些思想（Elm，函数式编程）发展出来的前端应用架构库，作为一个前端数据状态容器体现，并可以在React和其他任何前端框架中使用。")])]),t._v(" "),a("blockquote",[a("p",[t._v("  主要的关键词：store、action、reducer、dispatcher、数据的单向流通；reducer是一个状态机，就是在切换到某种状态的时候，状态要如何变化；store是一个数据存储单元，strore的建立要指定状态机；用户在视图上的操作，会最先让store去dispatch一个新的状态type，然后根据reducer来改变store中的state。")])]),t._v(" "),a("img",{attrs:{src:"http://wx3.sinaimg.cn/mw690/e992a6b1gy1fv119sm10cj20pe0kuguq.jpg",width:"400"}}),t._v(" "),a("blockquote",[a("p",[t._v("  现在要实现一个redux的步骤，简单的就是用一个起步项目：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("webpack + babel\nreact（3个npm包：react、react-dom、babel-react）\nRedux（1个npm包：redux）\n// 模块清单\ndevDependencies: {\n    \"babel-core\": '*',\n    \"babel-loader\": '*',\n    \"babel-preset-es2015\": '*',\n    \"babel-preset-es2016\": '*',\n    \"babel-preset-react\": '*',\n    \"redux\": '*',\n    \"webpack\": '*'\n},\ndependencies: {\n    'react': '*',\n    'react-dom': '*'\n}\n")])])]),a("h2",{attrs:{id:"中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[t._v("#")]),t._v(" 中间件")]),t._v(" "),a("blockquote",[a("p",[t._v("  异步操作怎么办？Action发出以后，Reducer立即算出State，这叫做同步；Action发出以后，过一段时间再执行Reducer，这就是异步。那么就要使用redux-thunk，这是一个比较流行的redux异步action中间件，比如action中有setTimeout或者通过fetch通用远程API这些场景，那么久应该使用redux-thunk了。redux-thunk帮助你统一了异步和同步 action的调用方式，把异步过程放在action级别解决，对component没有影响。")])]),t._v(" "),a("blockquote",[a("p",[t._v("  thunk把store改造了，把dispatch备份了一份，在后面传入了调用自己的store.dispatch的实参中【使得这个实参可以是一个函数，thunk使store的dispatch方法可以接受一个函数为参数，并且给这个函数传入一个备份了的dispatch方法，在后面给这个备份的dispatch传入异步的数据（来自数据库）做为参数(最终，作为数据库的api的异步回调函数的实参，处理获得的数据库数据，redux_thunk_study案例中这个回调函数是一个匿名函数)，这样就可以处理最初调用store.dispatch的那个需要链接数据库api的action中定义的函数了】。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("store.dispatch() → reducer识别了这个action → 执行指定Action → 改变store的state → 局部更新界面\n")])])]),a("img",{attrs:{src:"http://wx2.sinaimg.cn/mw690/e992a6b1gy1fv11bxhqfij217u0rggua.jpg",width:"400"}}),t._v(" "),a("blockquote",[a("p",[t._v("  redux会dispatch到reducer，return响应的state给store(redux自动帮你做的)。action描述了一个动作的发生，但是没有说明如何更新state，而reducer就是告诉React去如何更新state。")])]),t._v(" "),a("blockquote",[a("p",[t._v("  中间件redux-logger，在控制台打印每次dispatch的redux的变化日志。")])]),t._v(" "),a("blockquote",[a("p",[t._v("  此时，index.js形如：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createLogger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport reducer from './reducers'\nimport { getInitData } from './actions'\nimport App from './containers/App'\n\nvar logger = createLogger()\n// 中间件\nconst middlewares = [thunk, logger]\nconst store = createStore(reducer, applyMiddleware(...middlewares))\nstore.dispatch(getInitData())\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n")])])]),a("blockquote",[a("p",[t._v("  React-Redux提供的connnect函数：Provider 内的任何一个组件（比如这里的 Comp ），如果需要使用 state 中的数据，就必须是「被 connect 过的」组件——使用 connect 方法对「你编写的组件（ MyComp ）」进行包装后的产物。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 这样this.props.shared就连接到了redux\nconst mapStateToProps = state => ({\n    shared: state.shared,\n    data: state.myFlow\n})\nexport default connect(mapStateToProps)(Component)\n")])])]),a("blockquote",[a("p",[t._v("  Action是一个JSON普通JS对象，必须携带一个type属性，就是用户界面中用stroe去dispatch的东西，就是Action。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 这样this.props.shared就连接到了redux\nconst mapStateToProps = state => ({\n    shared: state.shared,\n    data: state.myFlow\n})\nexport default connect(mapStateToProps)(Component)\n")])])]),a("blockquote",[a("p",[t._v("  Action是一个JSON普通JS对象，必须携带一个type属性，就是用户界面中用stroe去dispatch的东西，就是Action。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const addStudent = (a) => {\n    type: 'ADD',\n    value: a\n}\n")])])]),a("blockquote",[a("p",[t._v("  reducer是一个纯函数，接收旧的state和action，返回新的state。跟action相匹配,但是没有发生直接关系。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(state, action) => {\n    if(state === undefined) {\n        return { 'value': 0}\n    }\n    switch(action.type) {\n        case 'ADD':\n            return { \"value\": state.value + action.a}\n            break\n    }\n}\n")])])]),a("blockquote",[a("p",[t._v("  每一个APP只能有一个store，所以就仅有一个state。我们总归是要在整个APP作用域下保持这个store的作用域。store是单例模式，在具体项目中可以分开写，但最终会集合成一个store。")])]),t._v(" "),a("img",{attrs:{src:"http://wx3.sinaimg.cn/mw690/e992a6b1gy1fv11iht2wcj20v40jyq6y.jpg",width:"500"}}),t._v(" "),a("blockquote",[a("p",[t._v("  使用原则：父组件要给子组件元素，直接用props传；如果子组件要拿到全局state，此时用connect()即可；如果子组件要传给父组件信息，可以使用props传递回调函数，也可以使用redux全局state来中转。")])]),t._v(" "),a("h2",{attrs:{id:"react-router路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-router路由"}},[t._v("#")]),t._v(" React-Router路由")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 安装\nnpm install react-router\n// main.js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Router, Route, hashHistory } from 'react-router'\nimport App from './containers/App'\nimport Page1 from './pages/Page1'\nimport Page2 from './pages/Page2'\n\nrender(<Router history={hashHistory}>\n    <Route path='/' component={app}>\n        <Route path='/page1' component={Page1}/>\n        <Route path='/page2' component={Page2}/>\n    </Route>\n</Router>\n)\n\n// App.js\nimport React, { Component } from 'react'\nimport { Link } from 'react-router'\n\nexport default class extends Component {\n    render() {\n        return <div>\n            <h1>嵌套路由</h1>\n            <ul>\n                <li><Link to='/page1'>page1</Link></li>\n                <li><Link to='/page2'>page2</Link></li>\n            </ul>\n            {this.props.children}\n        </div>\n    }\n}\n")])])]),a("blockquote",[a("p",[t._v("  params和query的获取和处理：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])])])}),[],!1,null,null,null);e.default=n.exports}}]);