(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{364:function(t,s,a){t.exports=a.p+"assets/img/3.1.1.b316f363.png"},387:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_1-js基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-js基础"}},[t._v("#")]),t._v(" 1.js基础")]),t._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("由Netscape网景公司，布兰登 艾奇实现。主要的作用：")]),t._v(" "),n("ul",[n("li",[t._v("数据验证；")]),t._v(" "),n("li",[t._v("读写html；")]),t._v(" "),n("li",[t._v("与浏览器窗口极其内容交互效果；")]),t._v(" "),n("li",[t._v("网页特效；")]),t._v(" "),n("li",[t._v("web游戏的制作；")]),t._v(" "),n("li",[t._v("基于Node.js技术的进行服务器端编程。")])]),t._v(" "),n("p",[t._v("目前版本：已经发展到ECMAscript6版本，常用的是5.1版本（ISO国际标准版本）。")]),t._v(" "),n("blockquote",[n("p",[t._v("完整的JS实现由三部分组成：语言核心ECMAScript、文档对象模型DOM、浏览器对象模型BOM。")])]),t._v(" "),n("h2",{attrs:{id:"hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[t._v("#")]),t._v(" Hello World")]),t._v(" "),n("p",[t._v("可以放在HTML文件的任何位置，JS代码需要写在script标签内部，JS文件也是纯文本文件；")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script type="text/javascript">\n    这是一段JS代码\n<script>\n')])])]),n("blockquote",[n("p",[t._v("单行注释//，sublime快捷键为ctrl+/；多行注释/*  */，sublime快捷键为ctrl+shift+/；")])]),t._v(" "),n("ul",[n("li",[t._v("alert()，JS内置的功能函数。可以让页面弹出一个警示框；alert语句写在script标签内部，是JS内置的功能函数，后面是英文状态下的小括号。括号里面写警示内容，内容如果是一段文字，必须用引号包裹，单双引号均可；")]),t._v(" "),n("li",[t._v("prompt()，JS内置的功能函数，页面会弹出一个对话框，可以让用户输入内容。prompt后也是跟英文状态下的小括号，里面可以写两个参数，中间用都好隔开，也可以只写第一个参数；用户输入的内容的是字符串类型的数据，返回到html中。")]),t._v(" "),n("li",[t._v("console()，JS内置的功能函数，可以在控制台的console标签栏中输出内容。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("ul",[n("li",[t._v("JS变量严格区分大小写，首个字符为字母、下划线、$，并且不能是JS的关键字和保留字;")]),t._v(" "),n("li",[t._v("html中xhtml规定用小写，其余不区分；")]),t._v(" "),n("li",[t._v("css不区分大小写，ID和类名区分；）；每条语句后面加分号（如果代码正好需要正常换行，也不会出错）；")])]),t._v(" "),n("p",[t._v("JS代码，如果没有特殊结构，都是按照从上到下、从左到右的顺序依次加载；JS语句对换行、空格、缩进不敏感。")])]),t._v(" "),n("h2",{attrs:{id:"字面量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字面量"}},[t._v("#")]),t._v(" 字面量")]),t._v(" "),n("p",[t._v("字面量是固定值的表示方法，也叫做常量。数字、字符串、数组、json等数据类型都有自己的字面量表示方法，即直接书写出。")]),t._v(" "),n("p",[t._v("数字字面量，常用的数学意义上的数字的表示方法：量不需要任何符号包裹，直接书写。分为整数、浮点数（即小数）、特殊值：")]),t._v(" "),n("ul",[n("li",[t._v("整数字面量，JS常用的整数字面量是十进制、八进制、十六进制；八进制，前导符号0、0o、0O其一；（注意八进制里只能出现0-7；超过了会转成10进制或者报错）；十六进制，前导符号0x、0X其一；（0-9；a-f或者A-F。字母部分超过了，会直接报错）。")]),t._v(" "),n("li",[t._v("浮点数字面量：JS中浮点数都是在十进制的模式下，重点记忆科学记数法的e。")]),t._v(" "),n("li",[t._v("特殊值：无穷infinity、NaN。无穷分为正无穷和负无穷（直接写infinity或者-infinity；有一些算式也等于无穷，比如12/0；）；NaN，不是数学意义上的数字，例如0/0。NaN是Number类型的数据。")]),t._v(" "),n("li",[t._v("字符串字面量，包括空字符串和非空字符串，由单引号或双引号包裹；特殊字符：\\n 换行、\\t Tab制表、 ' 单引号、 \" 双引号、 \\ 反斜杠。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("‘大河向东流，\\n天上的星星餐北斗哇'"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),n("p",[t._v("变量，其本身相当于一个容器，可以存储任意类型的数据，字符串、数字、布尔值、数组、变量、函数等等。")]),t._v(" "),n("ul",[n("li",[t._v("变量内部只能放置一种数据，每次被赋值，旧的数据就会被舍弃，用的时候用的都是新的数据( 理解这一点非常重要，再循环里特别要注意！)；")]),t._v(" "),n("li",[t._v("原生JS是动态的，弱类型的语言，指的是变量的类型是根据变量的值来决定的。")])]),t._v(" "),n("p",[t._v("变量声明的关键字是var(ES6的let、const) ，变量后面跟等号；变量一般先声明再赋值，赋值的符号是=。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("一个变量的每次赋值都会覆盖掉前面给变量赋的值；多个变量声明赋值用逗号隔开。")])]),t._v(" "),n("li",[n("p",[t._v("变量声明的提升：变量的声明可以在输出后面，但是变量的赋值要在输出语句前面，否则变量的值为 undefined。")])])])]),t._v(" "),n("h2",{attrs:{id:"js数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js数据类型"}},[t._v("#")]),t._v(" JS数据类型")]),t._v(" "),n("p",[t._v("JS中，无论是字面量还是变量（容器里盛放的数据的类型），都有明确的类型：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" String"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Boolean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" 以上是基本类型值，以下是引用类型 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" object；\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" symbol"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" bigInt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("引用类型之判断的是“指针”是否相同，所以：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 不等于 b ，并且[ ]！=[ ];")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ ]不等于[ ]，相当于给a赋了两次值;")]),t._v("\n")])])]),n("p",[n("strong",[t._v("数字字面量和盛放数字字面量的变量都是number类型，所有的字符串字面量都是string;")])]),t._v(" "),n("p",[t._v("变量的类型是其内部存储的数据的数据类型；")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'numnber'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'numnber'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Number]"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Null]"')]),t._v("\n")])])]),n("p",[n("strong",[t._v("typeof(null)返回’object'，不够准确。Object.prototype.toString.call()，比较准确。")])]),t._v(" "),n("h2",{attrs:{id:"数据类型的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型的转换"}},[t._v("#")]),t._v(" 数据类型的转换")]),t._v(" "),n("p",[t._v("不同数据类型之间可以相互转化。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("数字转字符串，涉及加法运算的数字和字符串的表达式，JS会自动把数字转换为字符串。")])]),t._v(" "),n("li",[n("p",[t._v('字符串转数字，JS中有三个函数Number()、parseInt()、parseFloat()，可以把非数值转为数值。第一个可以转换任意数据类型，后面两个专门用于字符串数据转为数值。使用parseInt将字符串转化为数字，只认开头的数字部分，字符串的开头是数字并且默认字符串里的数字为10进制，则会显示为数字，其余的转为NaN；例如“021”→21、“x1010”→NaN、"10"→10、021→17；“5.2e10”→5.2。')])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("parseInt，以规定进制，其默认为十进制：")]),t._v(" "),n("ul",[n("li",[t._v("可以对数字进行取整运算；")]),t._v(" "),n("li",[t._v("给数字转换进制，一般先把数字转换为10进制；")]),t._v(" "),n("li",[t._v("将字符串转为数字，里面可以规定进制，其默认为十进制。")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("parseInt（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("021")]),t._v("）         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 17（八进制转为10进制）")]),t._v("\nparseInt（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("021")]),t._v("，"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("）      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 15（先把八进制转为10进制，再把得到的结果当作8进制数字，再转为10进制）")]),t._v("\nparseInt（’"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("021")]),t._v("‘，"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("）"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 17")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("021")]),t._v("’"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  21")]),t._v("\nparseInt（“你好”）      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nparseInt（“"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("你好”）    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\nparseInt（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("）    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN；")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("parseFloat（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("） "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\nparseFloat（“"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),t._v("”）      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.5")]),t._v("\nparseFloat（"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),t._v("）        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.5")]),t._v("\n")])])]),n("img",{attrs:{src:a(364)}}),t._v(" "),n("h2",{attrs:{id:"运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),n("p",[t._v("数学运算符，加+、减-、乘*、除/、取余%、小括号（小括号也是运算符）;")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Math对象是JS内置的强大的数学对象，里面包含了很多属性和方法：")]),t._v("\nMath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个大于0小于1的随机数，出现随机性，既考虑random；")]),t._v("\nMath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("power"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回num的power次幂")]),t._v("\nMath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sqrt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回num的平方根")]),t._v("\nMath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),t._v("               "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回π的值")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Math.min(a ,b, c, d)和Math.max(a, b, c, d)可以取最小值。\n在进行阀值判断时可以使用，减少代码，例如，当x小于0时取0：Math.max(x, 0)；")])]),t._v(" "),n("ul",[n("li"),t._v(" "),n("li",[t._v("比较运算符，Comparison operators，大于小于、大于等于 小于等于、相等不相等、全等不全等；")]),t._v(" "),n("li",[t._v("逻辑运算符，Logical operators，或 || 、与（且）&&、非！；")]),t._v(" "),n("li",[t._v("赋值运算符，Assignment operators，等于=、加等于+=、*=、/=、%=、++递加1、--递减1；")]),t._v(" "),n("li",[t._v("条件运算符/三元运算符 Conditional operator: Boolean_expression ? true_value : false_value；")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("添加、获取属性的点 . ，也是运算符，且优先级最高；")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意--a和a--区别的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\n")])])]),n("h2",{attrs:{id:"运算符优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[t._v("#")]),t._v(" 运算符优先级")]),t._v(" "),n("p",[t._v("数学运算符，先乘除，后加减，有小括号先算小括号；正常的是数字与数字之间的数学运算；非常规的有很多情况：")]),t._v(" "),n("ul",[n("li",[t._v("数字与纯数字字符串、纯数字字符串与纯数字字符串之间，除了加号外，其他运算会将字符串自动转为数字。这个过程叫做“隐式转换”，不需要parseInt等方法；")]),t._v(" "),n("li",[t._v("其他类型的数据之间进行数学运算的时候，也会进行隐式转换。空字符串、null、false会转换成数字0；true会转换成数字1；NaN、undefined、非空非纯字符串转换成NaN。（NaN参与的数学运算结果都会返回NaN ）Infinity参与的运算情况有很多；")])]),t._v(" "),n("blockquote",[n("p",[t._v("  比较运算符，比较运算符输出的结果都是布尔值，要么是true，要么是false；常规的是数字与数字进行比较（注意相等是“= =”，“=”是赋值运算符；全等= = =会判断数据类型；）；非常规是数字与其他数据类型进行比较，或者其他之间比较：")])]),t._v(" "),n("ul",[n("li",[t._v("数字与其他数据类型比较，其它类型会发生隐式转换为数字后，再进行比较：纯数字字符串会转换为数字，空字符串、null、false转换为0，true 转换为1；")]),t._v(" "),n("li",[t._v("字符串与字符串进行比较，按照字符编码顺序，前面的小于后面的：字符串与字符串之间也能进行比较，注意二者必须都是字符串中的数字，下面的顺序；字符编码顺序：0-1，A-Z，a-z；比较方法是一个一个进行比较，而不是比较字符长度；")]),t._v(" "),n("li",[t._v("NaN除了不等于和不全等NaN 与返回true，其他参与的比较运算，都返回false；Infinity：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Infinity > Infinity    // false\nInfinity < Infinity    // false\nInfinity <= Infinity   // true\nInfinity >= Infinity   // true\nInfinity == Infinity   // true\nInfinity != Infinity   // false\nInfinity !== Infinity  // false\nInfinity === Infinity  // true\n")])])]),n("ul",[n("li",[t._v("进行比较运算时，一个运算符就执行依次：例如：3>2>1；其比较结果为false：代码在执行的时候，先比较3>2，输出结果true；在比较true>1，则输出结果false；(Number(true) = 1; Number(false) = 0)")])]),t._v(" "),n("blockquote",[n("p",[t._v("  逻辑运算符，逻辑运算符常用于布尔类型值之间；当操作为布尔值时，返回值也是布尔值，如果将其他数据隐式转换为布尔值，计算之后，输出对应位置的值，不一定是布尔值。非零数字、非空字符串，会隐式转换为true；0、null、undefined、空字符串、null则会转换为false。")])]),t._v(" "),n("ul",[n("li",[t._v("逻辑与运算，与&& ：一假为假，全真才真；（JS代码在计算机运算中，是从左往右的顺序），因此，要使a&&b为真中第一值a为假时，就能判断a&&b整体为假，不需要看b，返回值是a(假)；第一值a为真时，不能判断a&&b整体是否为真，需要根据b的值来判断整体是否为真，返回b的值；")]),t._v(" "),n("li",[t._v("逻辑或运算， 或||：一真为真，同假才假；")]),t._v(" "),n("li",[t._v("逻辑非运算，非真即假，非假即真；")])]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("赋值运算符，即先进行运算，再进行赋值。可以看出，赋值运算是有变量参与的运算；特殊符号++，可以写在变量前面，也可以写在后面；a++第一次使用的是原来的值，再次使用则是加完后的值（后面的a都等于原来的a加上1）；++第一次使用就是加完后的值，后面再次使用也是加完后的值；")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("综合运算顺序：")]),t._v(" "),n("ol",[n("li",[t._v(".运算；")]),t._v(" "),n("li",[t._v("++/--/!；")]),t._v(" "),n("li",[t._v("数学运算；")]),t._v(" "),n("li",[t._v("比较运算；")]),t._v(" "),n("li",[t._v("逻辑运算中的（先算&&，再算 ||）")]),t._v(" "),n("li",[t._v("赋值运算的其他")])])]),t._v(" "),n("h2",{attrs:{id:"对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),n("ul",[n("li",[t._v("数组存储的是一组数据，可以通过index获取数据。")]),t._v(" "),n("li",[t._v("对象中，每个数据都有自己的key。可以通过数据的名字得到数据的value。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("ul",[n("li",[t._v("数据多的时候，数组的使用效率变低。")]),t._v(" "),n("li",[t._v("注意在运算的时候数组和对象使用的取舍；")])])]),t._v(" "),n("p",[t._v("对象字面量语法：{}内部包括多个数据，每个数据之间用逗号隔开，最后一个数据后不能写逗号。每一项数据都包含属性名和属性值，键值对写法k:v。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("使用obj[key]获取某key对应的value，key会被计算成字符串；")])]),t._v(" "),n("ul",[n("li",[t._v("数据类型：给变量/key赋值=object(引用类型数据)，变量/key存的是地址。")]),t._v(" "),n("li",[t._v("调用每一项数据的方法：JSON对象点语法调用属性名即可，或者用[属性名]。")]),t._v(" "),n("li",[t._v("对象内部能嵌套对象。")]),t._v(" "),n("li",[t._v("修改，给调用的属性名去直接赋值。")]),t._v(" "),n("li",[t._v("删除，用到一个delete关键字，后面必须加空格，书写他的属性。")]),t._v(" "),n("li",[t._v("添加，直接给对象打点添加属性，属性值同时赋值。")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("因为点语法也是一步运算，所以多次引用引用类型值中的某一项，应该赋值给变量，变量存在栈内存中。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 对象的遍历 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" item "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a, 1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("引用类型值的复制，由于JSON对象是引用类型值；所以复制的时候必须考虑是深复制还是浅复制。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浅复制")]),t._v("\n\nloadsh"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deepClone "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 深复制")]),t._v("\n")])])]),n("p",[n("strong",[t._v("使用JSON.stringfy可以某些情况下检验复杂对象是否完全相等。")])])]),t._v(" "),n("h2",{attrs:{id:"json"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[t._v("#")]),t._v(" JSON")]),t._v(" "),n("p",[t._v("JSON叫做JavaScript Object Notation， JavaScript对象表示法。JSON对象创建的最简单的方式，就是字面量，一对大括号{}。是一种严格的js对象的格式，JSON的属性名必须有双引号，如果值是字符串，也必须是双引号。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Json转化为js对象：JSON.parse(jsonstring)；Js对象转换为Json：JSON.stringify(jsobj)，不兼容IE7；")])]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token script"}},[n("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这只是JS对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj3"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("width"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("height"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*这跟JSON就更不沾边了,只是JS的 对象 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj4"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'width'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'height'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*这跟JSON就更不沾边了,只是JS的对象 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj5"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"width"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"height"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rose"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*我们可以把这个称做：JSON格式的JavaScript对象 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"width":100,"height":200,"name":"rose"}\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*我们可以把这个称做：JSON格式的字符串 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"width"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"height"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rose"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"width"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"height"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rose"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"width"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"height"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rose"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*这个叫JSON格式的数组，是JSON的稍复杂一点的形式 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'['")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"width":100,"height":200,"name":"rose"},\'')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"width":100,"height":200,"name":"rose"},\'')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"width":100,"height":200,"name":"rose"},\'')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("']'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 这个叫稍复杂一点的JSON格式的字符串 */")]),t._v("\n")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),n("h2",{attrs:{id:"js中的声明提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js中的声明提升"}},[t._v("#")]),t._v(" JS中的声明提升")]),t._v(" "),n("blockquote",[n("p",[t._v("  “函数会首先被提升，然后才是变量”。函数不存在赋值流程，一个完整的变量生成分为声明和赋值两个步骤，变量声明并赋值只会提升声明；不声明只赋值不会提升；\n函数提升优先级比变量提升要高，且不会被变量声明覆盖。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'world'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("但是后面会被变量赋值覆盖，因为变量的赋值流程是从上往下的，不会出现提升；")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"函数声明"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出上面函数")]),t._v("\nfoo "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"变量"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '变量'")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);