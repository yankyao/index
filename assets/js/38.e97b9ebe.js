(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{458:function(e,a,t){"use strict";t.r(a);var s=t(25),i=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_4-条件和循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-条件和循环"}},[e._v("#")]),e._v(" 4.条件和循环")]),e._v(" "),t("h2",{attrs:{id:"条件分支语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件分支语句"}},[e._v("#")]),e._v(" 条件分支语句")]),e._v(" "),t("p",[e._v("如果没有特殊结构，JS代码从上往下执行语句。条件分支语句，满足给定的条件，可以选择性的执行代码；不满足则不会执行。是流程控制语句的一种。")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("if语句")]),e._v("，if(condition){执行代码1}else{执行代码2}。满足condition，执行结构体1里的所有代码；不满足则执行结构体2中的所有代码。如果结构体里，是单行语句，可以省略大括号（尽量不要省略）。if语句可以嵌套if语句；if ...else if...else if可以组成多条件分支语句。条件判断：不同层次的尽量用嵌套判断。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("三元表达式")]),e._v("，唯一一个有三个元素参与的运算，也叫做三元表达式。结构为：布尔表达式？为真的值：为假的值。可以用if语句模拟，但是在通过条件对变量进行二选一的赋值时，三元表达式非常简洁。三元运算符理论上比if等运行速度快。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("switch语句")]),e._v("，判断时，是全等判断'==='，。switch变量匹配case的标签，匹配成功，则执行case里的代码，一般的一个case里面一个break；相当于多个else if语句连用；最后使用的default相当于if语句里最后的else；合理使用break可以达到多变量选一个，多个case使用一个break；多用于给一个变量匹配固定值的情况。")])])]),e._v(" "),t("h2",{attrs:{id:"循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[e._v("#")]),e._v(" 循环语句")]),e._v(" "),t("p",[e._v("是一系列反复执行直到符合特定条件的命令，对满足条件的代码循环执行，规定的条件表达式为假时，跳出循环、停止重复执行。JS中的循环语句有for语句、do while语句、while语句。在循环中，可以使用break和continue。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("for循环")]),e._v("语句是一种前测试循环语句，小括号里用var声明的变量是全局变量。从初始值开始测试是否满足变量的条件，都要用分号隔开；变量可以定义在括号外面，但是分号不能省略；步长也可以设置在循环体内，分号也不能省略；for循环和if语句可以根据情况进行相互嵌套。")])]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v(" 定义循环体变量，设置初始值；变量的条件，一般为设置最大或者最小值；步长 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    执行代码\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("ul",[t("li",[t("p",[t("code",[e._v("do while循环")]),e._v("，do while循环是后测试循环语句；变量定义在循环外面，在测试条件之前会先执行一次循环体。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("while循环")]),e._v("， while反复执行循环体，直到条件为假时停止；是一前测试循环语句，循环变量也是定义在循环外面。")])])]),e._v(" "),t("p",[t("strong",[e._v("循环耗时：for > while = doWhile。")])]),e._v(" "),t("p",[e._v("关键字:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("break")]),e._v("，可以终止循环，一般写在循环内部的条件语句里。break如果没有特殊指向，终止的是所在的循环，不能终止在往外的循环。可以给外层循环加标签waiceng:，然后break waiceng，可以终止对应的这一层循环。执行了break语句，就会终止其所在的循环。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("continue")]),e._v("，continue终止的是满足条件的循环，一般写在循环内部的条件语句中（意思是，过滤掉if条件的循环变量的值），但是不会跳出循环，而是继续执行满足条件的循环，也可以终止加标签的外层循环。")])])]),e._v(" "),t("h2",{attrs:{id:"组合用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合用法"}},[e._v("#")]),e._v(" 组合用法")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("穷举思想")]),e._v("，希望得到特定条件的数据，并不会直接输出，需要我们编写一段代码，规定合理的范围，设定验证的条件。把范围里的数据都检测一遍，用条件语句挑出符合条件的数据一一列举出来，然后输出。这些都需要用程序去实现，外层循环，内层条件，复杂的还需要进行合理的嵌套。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("累加器和累乘器")]),e._v("（变量），声明写在相应的循环外面。")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("累加器来统计满足条件的个数、总数或者和，初始值一般为0，输出值在相应的循环结束之后；")])])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("累乘器是计算数字的乘积，初始值一般为1，也是循环结束之后输出；")])])])])])}),[],!1,null,null,null);a.default=i.exports}}]);