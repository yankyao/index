(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{382:function(t,s,a){t.exports=a.p+"assets/img/4.2.1.ce7b339a.png"},483:function(t,s,a){"use strict";a.r(s);var e=a(25),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_2-http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-http"}},[t._v("#")]),t._v(" 2.http")]),t._v(" "),e("h2",{attrs:{id:"服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器"}},[t._v("#")]),t._v(" 服务器")]),t._v(" "),e("h2",{attrs:{id:"前端和服务器端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端和服务器端"}},[t._v("#")]),t._v(" 前端和服务器端")]),t._v(" "),e("p",[t._v("IP地址、域名、服务器，服务器是指网络中能对其它机器提供某些服务的计算机系统。")]),t._v(" "),e("blockquote",[e("p",[t._v("服务器端给客户端提供相应的服务，供客户端使用。")])]),t._v(" "),e("p",[t._v("前端是浏览器呈现的部分，相对于前端，后台你可以理解为服务器端专门处理、读取、存储数据库数据的部分。网站是基于B\\S架构，即浏览器---服务端架构，就程序来讲，可笼统划分为前端程序和服务器端程序。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("前端 ，页面框架、页面美化、交互性、前端代码优化；")])]),t._v(" "),e("li",[e("p",[t._v("服务器端 ，使用语言（php，java，.net等） 、数据库选择与操作、数据处理加工 。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("http平台选择，iis，apache、httpd、nginx等。")])]),t._v(" "),e("h2",{attrs:{id:"网络通信协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络通信协议"}},[t._v("#")]),t._v(" 网络通信协议")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("引用层")]),t._v(" "),e("th",[t._v("传输层")]),t._v(" "),e("th",[t._v("网络层")]),t._v(" "),e("th",[t._v("数据链路层")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("文件传输、\b电子邮件、文件服务、虚拟终端：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet")]),t._v(" "),e("td",[t._v("提供端对端的接口 TCP，UDP")]),t._v(" "),e("td",[t._v("为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP")]),t._v(" "),e("td",[t._v("传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP")])])])]),t._v(" "),e("h2",{attrs:{id:"http"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),e("p",[t._v("超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器，目前常用的是HTTP/1.1 版本。")]),t._v(" "),e("blockquote",[e("p",[t._v("实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页，我们的Request 有可能是经过了代理服务器，最后才到达Web服务器的。")])]),t._v(" "),e("p",[t._v("代理服务器就是网络信息的中转站：")]),t._v(" "),e("ul",[e("li",[t._v("提高访问速度，大多数的代理服务器都有缓存功能；")]),t._v(" "),e("li",[t._v("突破限制，也就是FQ了；")]),t._v(" "),e("li",[t._v("隐藏身份。")])]),t._v(" "),e("img",{attrs:{src:a(382),width:"600"}}),t._v(" "),e("p",[e("strong",[t._v("http协议本身是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。为了解决这个问题，Web程序引入了Cookie机制来维护状态。")])]),t._v(" "),e("h2",{attrs:{id:"url详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url详解"}},[t._v("#")]),t._v(" URL详解")]),t._v(" "),e("p",[t._v("URL(Uniform Resource Locator)地址用于描述一个网络上的资源，基本格式如下：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("schema"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("host"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("port#"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("query"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("string"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("#anchor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// scheme，指定低层使用的协议(例如：http, https, ftp)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// host，HTTP服务器的IP地址或者域名")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// port#，HTTP服务器的默认端口是80，这种情况下端口号可以省略。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果使用了其他端口，必须指明，例如http://www.cnblogs.com:8080/")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// path，访问资源的路径")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// url-params、query-string，发送给http服务器的数据")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// anchor，锚")]),t._v("\nhttp"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mywebsite"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sj"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8079")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sviergn"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("#stuff\nSchema"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" http\nhost"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" www"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mywebsite"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\npath"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sj"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("test\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v(" params"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8079")]),t._v("\nQuery String"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sviergn"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),e("h2",{attrs:{id:"状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),e("p",[t._v("Response 消息中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("中定义了"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("XX 提示信息 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 表示请求已被成功接收，继续处理\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("XX 成功 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 表示请求已被成功接收，理解，接受\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("XX 重定向 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 要完成请求必须进行更进一步的处理\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("XX 客户端错误 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 请求有语法错误或请求无法实现\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("XX 服务器端错误 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 服务器未能实现合法的请求\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  常见的状态码：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最常见的就是成功响应状态码200了， 这表明该请求被成功地完成，所请求的资源发送回客户端")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("302")]),t._v(" Found "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("304")]),t._v(" Not Modified "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代表上次的文档已经被缓存了， 还可以继续使用")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v(" Bad Request "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 客户端请求与语法错误，不能被服务器所理解")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),t._v(" Forbidden "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务器收到请求，但是拒绝提供服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v(" Not Found "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求资源不存在")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" Internal Server Error "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务器发生了不可预期的错误")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" Server Unavailable "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务器当前不能处理客户端的请求，一段时间后可能恢复正常")]),t._v("\n")])])]),e("h2",{attrs:{id:"请求类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求类型"}},[t._v("#")]),t._v(" 请求类型")]),t._v(" "),e("p",[t._v("常用的GET POST OPTIONS：")]),t._v(" "),e("ul",[e("li",[t._v("GET获取资源")]),t._v(" "),e("li",[t._v("POST提交表单")]),t._v(" "),e("li",[t._v("OPTIONS预请求，查询服务器；允许客户端查看服务器的性能。")])]),t._v(" "),e("p",[t._v("不常用的PUT DELETE HEAD：")]),t._v(" "),e("ul",[e("li",[t._v("PUT更新资源，从客户端向服务器传送的数据取代指定的文档的内容。")]),t._v(" "),e("li",[t._v("DELETE删除资源")]),t._v(" "),e("li",[t._v("HEAD只返回报文头，类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头；")])]),t._v(" "),e("p",[t._v("不常见的CONNECT TRACE PATCH：")]),t._v(" "),e("ul",[e("li",[t._v("TRACE回显服务器收到的请求，主要用于测试或诊断。")])]),t._v(" "),e("h2",{attrs:{id:"缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[t._v("#")]),t._v(" 缓存机制")]),t._v(" "),e("p",[t._v("强制缓存：Expires、Cache-Control")]),t._v(" "),e("ul",[e("li",[t._v("Expires：Exprires的值为服务端返回的数据到期时间。当再次请求时的请求时间小于返回的此时间，则直接使用缓存数据。但由于服务端时间和客户端时间可能有误差，这也将导致缓存命中的误差，另一方面，Expires是HTTP1.0的产物，故现在大多数使用Cache-Control替代。")]),t._v(" "),e("li",[t._v("Cache-Control：Cache-Control有很多属性，不同的属性代表的意义也不同。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//客户端可以缓存")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//客户端和代理服务器都可以缓存")]),t._v("\nmax"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("time "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//缓存内容将在t秒后失效")]),t._v("\nno"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cache "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//需要使用协商缓存来验证缓存数据")]),t._v("\nno"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("store "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有内容都不会缓存。")]),t._v("\n")])])]),e("p",[t._v("协商缓存：Last-Modified、Etag")]),t._v(" "),e("ul",[e("li",[t._v("Last-Modified:")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("Last-Modified，服务器在响应请求时，会告诉浏览器资源的最后修改时间。")]),t._v(" "),e("li",[t._v("if-Modified-Since,浏览器再次请求服务器的时候，请求头会包含此字段，后面跟着在缓存中获得的最后修改时间。服务端收到此请求头发现有if-Modified-Since，则与被请求资源的最后修改时间进行对比，如果一致则返回304和响应报文头，浏览器只需要从缓存中获取信息即可。\n如果没有被修改:则开始`继续'传送文件: 服务器返回: 200 OK;如果文件被修改:则不传输,服务器返回: 412 Precondition failed (预处理错误).")]),t._v(" "),e("li",[t._v("Last-Modified 说好却也不是特别好，因为如果在服务器上，一个资源被修改了，但其实际内容根本没发生改变，会因为Last-Modified时间匹配不上而返回了整个实体给客户端（即使客户端缓存里有个一模一样的资源）。为了解决这个问题，HTTP1.1推出了Etag。")])])]),t._v(" "),e("ul",[e("li",[t._v("Etag:")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("服务器response中，Etag字段是根据当前资源内容生成的唯一标识;内容相同，即使重现上传，Etag也不变；")]),t._v(" "),e("li",[t._v("服务端响应header里会返回Etag字段；")]),t._v(" "),e("li",[t._v("再次请求服务器时，浏览器的请求报文头部header中If-None-Match的值就是之前返回的Etag。服务器接If-None-Match的值与服务端Etag进行对比，不同返回200，重新发送资源，同时响应头会携带Etag;相同则说明资源无修改，返回状态码304，浏览器直接从缓存中获取数据信息。")]),t._v(" "),e("li",[t._v("但Etag是服务器计算出来的，计算过程会稍微占用服务端性能。")])])]),t._v(" "),e("h2",{attrs:{id:"http2-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" HTTP2.0")]),t._v(" "),e("p",[t._v("优化工作：")]),t._v(" "),e("ul",[e("li",[t._v("二进制\b分帧")]),t._v(" "),e("li",[t._v("首部压缩")]),t._v(" "),e("li",[t._v("多路复用")]),t._v(" "),e("li",[t._v("请求优先级")]),t._v(" "),e("li",[t._v("服务器推送")])]),t._v(" "),e("p",[t._v("如何使用：")]),t._v(" "),e("ul",[e("li",[t._v("服务端开启，浏览器访问")])])])}),[],!1,null,null,null);s.default=r.exports}}]);