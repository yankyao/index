(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{359:function(t,e,a){t.exports=a.p+"assets/img/5.6.1.0eea4785.png"},360:function(t,e,a){t.exports=a.p+"assets/img/5.6.2.d7a8ba76.png"},361:function(t,e,a){t.exports=a.p+"assets/img/5.6.3.7133690c.png"},362:function(t,e,a){t.exports=a.p+"assets/img/5.6.4.24bd2921.png"},423:function(t,e,a){"use strict";a.r(e);var s=a(25),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_6-vue源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue源码"}},[t._v("#")]),t._v(" 6.vue源码")]),t._v(" "),s("h2",{attrs:{id:"vue源码目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue源码目录"}},[t._v("#")]),t._v(" vue源码目录")]),t._v(" "),s("img",{attrs:{src:a(359)}}),t._v(" "),s("h2",{attrs:{id:"核心实现-响应式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心实现-响应式"}},[t._v("#")]),t._v(" 核心实现-响应式")]),t._v(" "),s("img",{attrs:{src:a(360)}}),t._v(" "),s("ol",[s("li",[t._v("创建Vue类，通过Observer劫持监听所有属性。")])]),t._v(" "),s("blockquote",[s("p",[t._v("observe函数的作用：递归遍历data选项，它当中的defineReactive函数为data中每一个key定义getter和setter，达到数据劫持的目的。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("ol",[s("li",[t._v("创建Dep类，将视图中的所有依赖收集管理，包括依赖添加和派发通知；")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("deps"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存放Watcher的实例")]),t._v("\naddDep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加Watcher")]),t._v("\nnotify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通知所有的Wather执行更新。遍历deps数组，调用每个Wather的更新方法")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("创建监听器Watcher类;")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Dep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将当前Watcher实例添加到Dep.target上。get时，就能通过Dep.target拿到当前Watcher的实例。")]),t._v("\nupdate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用dep.notify，让依赖管理器通知更新，则所有的Watcher会执行update方法")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("创建compile.js，用于扫描模板中所有依赖(指令、插值、绑定、事件…)，创建更新函数和Watcher；")])]),t._v(" "),s("li",[s("ol",[s("li",[t._v("创建编译器Compile类，接收两个参数，el(宿主元素或选择器)和vm(当前vue实例);")])])]),t._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[t._v("创建node2Fragment函数，将dom节点( $el )截成代码块( 转换为Fragment )来处理，而不是直接做dom操作，提高执行效率。")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("创建一个新的fragment，将原生节点移动至fragment;\n返回fragment，传给编译函数进行编译；")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("ol",{attrs:{start:"3"}},[s("li",[t._v("创建compile函数，执行编译( 将模板中的动态值替换为真实的值 )，传入代码块;")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("获取所有的孩子节点，进行遍历，判断节点类型，并作出相应的判断;\n处理元素节点，遍历可能存在的子节点，往下递归;")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模版编译")]),t._v("\ncompileElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译元素节点，拿到所有属性名称，进行遍历")]),t._v("\ncompileText"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译文本节点")]),t._v("\n")])])]),s("img",{attrs:{src:a(361)}}),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("ol",{attrs:{start:"4"}},[s("li",[t._v("将生成的结果插入el;")])])])]),t._v(" "),s("h2",{attrs:{id:"模版编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模版编译"}},[t._v("#")]),t._v(" 模版编译")]),t._v(" "),s("p",[t._v("主要是在compile过程中：")]),t._v(" "),s("ul",[s("li",[t._v("parse函数解析template;")]),t._v(" "),s("li",[t._v("optimize函数优化静态内容；")]),t._v(" "),s("li",[t._v("generate函数创建render函数字符串，等待执行vdom时调用，进入patch流程，最终上DOM树；")])]),t._v(" "),s("ol",[s("li",[t._v("parse函数解析最终生成AST树：")])]),t._v(" "),s("p",[s("strong",[t._v("AST，在VUE中指的是一个嵌套的、有标签名、属性、父子关系等的JS对象，以树形来表示DOM结构。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("optimize优化：")])]),t._v(" "),s("p",[s("strong",[t._v("parse出来的AST进行标记静态节点、非静态节点的标记")])]),t._v(" "),s("p",[s("strong",[t._v("静态节点，指的是没有订阅state，不需要每次都刷新的标签")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("generate生成render函数：")])]),t._v(" "),s("p",[s("strong",[t._v("输入AST，返回AST，对AST进行递归，调用相应节点生成标签字符串的方法，返回生成字符串的render函数")])]),t._v(" "),s("img",{attrs:{src:a(362)}}),t._v(" "),s("h2",{attrs:{id:"patch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),s("p",[t._v("对比新旧的Vnode，创建、删除或者更新DOM节点/组件实例；使用Diff算法尽可能的复用先前的DOM节点；")]),t._v(" "),s("h2",{attrs:{id:"vue3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue3"}},[t._v("#")]),t._v(" vue3")]),t._v(" "),s("p",[t._v("Vuejs3 在北京时间2020年9月19日凌晨，终于发布了3.0版本，代号：One Piece；")]),t._v(" "),s("p",[t._v("有 6 个方面的重要变更：")]),t._v(" "),s("ul",[s("li",[t._v("Performance （性能）；")]),t._v(" "),s("li",[t._v("Tree-shaking support （支持 Tree-shaking）；")]),t._v(" "),s("li",[t._v("Composition API；")]),t._v(" "),s("li",[t._v("Fragment, Teleport, Suspense；")]),t._v(" "),s("li",[t._v("Better TypeScript support （更好的 TypeScript 支持度）；")]),t._v(" "),s("li",[t._v("Custom Renderer API （自定义的 Renderer API）；")])]),t._v(" "),s("p",[t._v("性能上，有以下改进：")]),t._v(" "),s("ul",[s("li",[t._v("Rewritten virtual dom implementation （重写了虚拟 DOM）；")]),t._v(" "),s("li",[t._v("Compiler-informed fast paths （优化编译）；")]),t._v(" "),s("li",[t._v("More efficient component initialization （更高效的组件初始化）；")]),t._v(" "),s("li",[t._v("1.3-2x better update performance （1.3~2 倍的更新性能）；")]),t._v(" "),s("li",[t._v("2-3x faster SSR （2~3 倍的 SSR 速度）；")])])])}),[],!1,null,null,null);e.default=r.exports}}]);