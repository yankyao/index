(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{463:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_5-正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-正则"}},[t._v("#")]),t._v(" 5.正则")]),t._v(" "),a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),a("p",[t._v("regular expression，简写为RegExp；用来匹配字符串中的字符组合的模式，常用来做表单验证、字符串数据的修改等；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 在JS中，正则表达是对象类型数据，是一种索引类型object。 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\\w$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* "object" */')]),t._v("\n")])])]),a("p",[t._v("常用方法，谁的方法谁调用：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据匹配字符串，来切割父字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用正则表达式与字符串相比较，返回一个从字符串中匹配正则的结果的数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对正则表达式规定的指定字符串进行搜索，返回父字符串中出现的第一个匹配项的下标")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用正则表达式和字符串相比较，然后用新的字符串来替换父字符串中匹配的部分字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在目标字符串中执行一次正则匹配操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 测试当前字符串能否匹配正则表达式")]),t._v("\n")])])]),a("h2",{attrs:{id:"正则的术语和操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则的术语和操作符"}},[t._v("#")]),t._v(" 正则的术语和操作符")]),t._v(" "),a("p",[t._v("正则表达式由普通字符和特殊字符（又叫元字符）组成。")]),t._v(" "),a("p",[t._v("普通字符包括大小写的英文字母、数字，元字符则是具有特殊意义的符号；正则中的元字符包括："),a("code",[t._v("（）[ ] ｛｝\\ ^ $ | ? * +")]),t._v("。在表达式中要匹配字符串中的出现的元字符，要用到转义字符\\。")]),t._v(" "),a("p",[t._v("预定义特殊字符串:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\\t       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 制表符      ")]),t._v("\n\\n、\\r   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回车符或者换行符  ")]),t._v("\n\\f       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 换页符 ")]),t._v("\n\\b       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空格  ")]),t._v("\n")])])]),a("p",[t._v("字符集，正则表达式中，用一类字符串集合去匹配字符串中的一个字符。字符集用[ ]包裹：")]),t._v(" "),a("ul",[a("li",[t._v("简单类：在[ ]中罗列出来；")]),t._v(" "),a("li",[t._v("范围类：[0-9]、[a-z]、[A-Z]；")]),t._v(" "),a("li",[t._v("组合类：[0-9a-z]、[0-9a-b]、[1-6H-Y]；")]),t._v(" "),a("li",[t._v("负向^：表示不是中括号里的，例如：[^e-l]；")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("a-zA-Z和A-z的区别；A-z包含_等符号。")])]),t._v(" "),a("p",[a("code",[t._v("修饰符")]),t._v("，写在/  /后面:")]),t._v(" "),a("ul",[a("li",[t._v("g修饰符用于执行全局匹配，查找所有匹配而不是在找到第一个后停止，用于match和replace方法中；")]),t._v(" "),a("li",[t._v("i修饰符用于执行对大小写不敏感的匹配。两个修饰符可以同时使用，直接连写即可。")])]),t._v(" "),a("p",[a("code",[t._v("边界")]),t._v("，开头^、结尾$：/^    $/。")]),t._v(" "),a("p",[t._v("预定义字符集：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\\n\\r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 除了回车和换行之外的任意字符；")]),t._v("\n\\d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数字字符")]),t._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非数字字符")]),t._v("\n\\s         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空白字符  空格 缩进 换行 换页")]),t._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("S")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非空白字符")]),t._v("\n\\w         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单词字符[0-9a-zA-Z_]数字大小写字母下划线")]),t._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非单词字符")]),t._v("\n\\b         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于查找位于单词（连续数字或者字母）的开头或者结尾的匹配；")]),t._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于查找不处在单词（连续数字或者字母） 的开头或者结尾的匹配（连续数字或者字母中间）；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 对比记忆：单词边界\\b必须包括单词边界。非单词边界\\B不能有单词边界。 */")]),t._v("\n")])])]),a("p",[t._v("量词，正则表达式中，量词规定的数量的作用范围，是量词前面的一个字符或者分组。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("｛n｝       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n可以是任何正整数和0；表示出现的次数；")]),t._v("\n｛n，m｝    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示连续出现（紧挨，不能有空格或其他字符）至少n次，最多出现m次；")]),t._v("\n｛n，｝     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 至少出现n次；")]),t._v("\n？         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出现0次或者1次；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出现任意次；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出现1次或多次，至少出现1次；")]),t._v("\n")])])]),a("p",[t._v("分组，量词能处理紧密相连的单个字符或者同类型字符；小括号对字符进行分组，量词的作用范围是小括号里的所有字符。")]),t._v(" "),a("ul",[a("li",[t._v("或操作符|，符号前面的或者后面的；利用小括号分组，指的是是小括号里的或关系。")]),t._v(" "),a("li",[t._v("分组的反向引用，反向引用标识是对正则表达式中的匹配组捕获的子字符串进行编号，通过''\\编号(在表达式中)\"，或者''$编号（在表达式外）\"进行引用。从1开始计数。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcdef"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(ab|cd)+|ef/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["abcd", "cd", index: 0, input: "abcdef"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在正则表达式里反向引用：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'byebye'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bye'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'byebye'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'byebyy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在正则表达式外:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc=def'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\w{3})=(\\w{3})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$2=$1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "def=abc"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123*456'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d{3})/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//函数内输出两次，第一次123 123 0，第二次456 456 4。 最终返回"undefined*undefined"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123*456'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d{3})\\*(\\d{3})/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("matchPart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                                                    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数内输出一次'123*456' '123' '456'。最终返回\"333\"")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// replace相当于把字符串中符合正则的各个部分取出来；function对字符串中匹配到的各个部分进行重组")]),t._v("\n")])])]),a("p",[t._v("中文匹配，固定用法[\\u4e00-\\u9fa5]。")]),t._v(" "),a("p",[a("strong",[t._v("正向肯定断言?=，非获取匹配？：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupByCommas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\B(?=(\\d{3})+(?!\\d))/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupByCommas")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3453453453453")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "3,453,453,453,453"')]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);